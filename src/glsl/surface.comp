#version 460 core

// #include snip/comp/layout.vert

readonly buffer density_block {
    float density[];
};

struct Vert {
    vec3 position;
    uint padding;
    vec3 normal;
    uint colour;
};

writeonly buffer surface_block {
    Vert surface[];
};

layout(binding = 0) uniform atomic_uint count;

uniform uint chunk_size;
uniform float mip_scale;
uniform vec3 offset;

// #include snip/comp/index.vert
// #include snip/noise/simplex.vert

const bool OCCLUSION = false;

vec3 sampleColour(vec3 pos) {
    vec3 colour = vec3(0);
    for (uint c = 0; c < 3; ++c) {
        vec3 c_pos = pos;
        c_pos[c] += chunk_size * 99;
        colour[c] += (simplexNoise(c_pos / chunk_size / 2) + 1) / 2;
    }
    return colour;
}

bool fullIndex(uint id) {
    return density[id] > 0;
}

bool emptyIndex(uint id) {
    return !fullIndex(id);
}

uint indexFromPos(vec3 _pos) {
    const uint size = chunk_size / uint(mip_scale);
    const vec3 pos = _pos; // floor((_pos + vec3(size / 2)) / mip_scale);
    uint index = 0;

    for (uint d = 0; d < 3; ++d) {
        const uint i = 2 - d;
        if (pos[i] < 0 || pos[i] >= size) return ~0; // Position is outside chunk
        index *= size;
        index += uint(pos[i]);
    }

    return index;
}

bool fullPos(vec3 pos) {
    uint index = indexFromPos(pos);
    if (index == ~0) return false; // TODO query neighbours
    // TODO if mip_level != 0 and we are not calculating occlusion, return false
    return fullIndex(index);
}

void main() {
    // Calculate the index of density that corresponds to this thread
    const uint id = threadIndex();
    // Skip empty cubes
    if (emptyIndex(id)) return;
    // Faces
    const vec3 pos = gl_GlobalInvocationID;
    for (uint f = 0; f < 6; ++f) {
        vec3 neighbour = pos;
        neighbour[f / 2] += (f % 2 > 0) ? mip_scale : -mip_scale;
        if (fullPos(neighbour)) continue;
        // Sample voxel occlusion
        bool occlusion[8];
        if (OCCLUSION) for (uint e = 0; e < 4; ++e) {
            // Voxels that share edges
            vec3 occluder = neighbour;
            occluder[(e / 2 + f / 2 + 1) % 3] += (e % 2 > 0) ? mip_scale : -mip_scale;
            occlusion[e] = fullPos(occluder);
            // Voxels that share corners
            occluder = neighbour;
            occluder[(f / 2 + 1) % 3] += (e % 2 > 0) ? mip_scale : -mip_scale;
            occluder[(f / 2 + 2) % 3] += (e / 2 > 0) ? mip_scale : -mip_scale;
            occlusion[e + 4] = fullPos(occluder);
        }
        uint i = atomicCounterAdd(count, 2 * 3);
        // Triangles
        for (uint t = 0; t < 2; ++t) {
            // Vertices
            for (uint v = 0; v < 3; ++v) {
                vec3 vert = (pos + neighbour) / 2 - vec3(chunk_size / uint(mip_scale) / 2);
                const bool x = (t + v + f) % 2 > 0;
                const bool y = v / 2 == t;
                vert[(f / 2 + 1) % 3] += (x ? mip_scale : -mip_scale) / 2;
                vert[(f / 2 + 2) % 3] += (y ? mip_scale : -mip_scale) / 2;
                // Vertex positions
                surface[i].position = vert;
                surface[i].padding = packUnorm4x8(vec4(0));
                surface[i].normal = vec3(0);
                surface[i].normal[f / 2] = f % 2 > 0 ? 1 : -1;
                vec3 colour = sampleColour(vert + offset);
                if (OCCLUSION) {
                    float occ = 0;
                    if (occlusion[x ? 1 : 0]) occ += 1;
                    if (occlusion[y ? 3 : 2]) occ += 1;
                    if (occlusion[4 + (x ? 1 : 0)
                                    + (y ? 2 : 0)]) occ += 1;
                    colour /= pow(1.1, occ);
                }
                surface[i].colour = packUnorm4x8(vec4(colour, f / 255.999));
                ++i;
            }
        }
    }
}
